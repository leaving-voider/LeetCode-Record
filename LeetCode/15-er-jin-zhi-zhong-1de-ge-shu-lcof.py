###############################################################################################
# python自带方法
###############################################################################################
class Solution:
    def hammingWeight(self, n: int) -> int:
        return bin(n).count("1")


###############################################################################################
# 循环检查二进制位
###########
# 时间复杂度：O(k), 固定检查k个二进制位，此题中k=32
# 空间复杂度：O(1)
###############################################################################################
class Solution:
    def hammingWeight(self, n: int) -> int:
        res = 0
        while True:
            if n%2 == 1:
                res += 1
            n = n >> 1
            if n == 0:
                break
        return res

## 或者
class Solution:
    def hammingWeight(self, n: int) -> int:
        res = 0
        while n:
            if n%2 == 1:
                res += 1
            n = n >> 1
        return res


## 官方给的更简便的写法
class Solution:
    def hammingWeight(self, n: int) -> int:
        return sum(1 for i in range(32) if n & (1 << i))


###############################################################################################
# 官方方法，利用二进制的位运算，但更好，循环更少
###########
# 时间复杂度：O(logn), n为n值，最坏需循环每个二进制位
# 空间复杂度：O(1)
###############################################################################################
class Solution:
    def hammingWeight(self, n: int) -> int:
        res = 0
        while n:
            n &= n-1
            res += 1
        return res